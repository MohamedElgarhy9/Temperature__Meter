
Temperature Meter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  00000be2  00000c76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  0080006e  0080006e  00000c84  2**0
                  ALLOC
  3 .stab         00001674  00000000  00000000  00000c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  000022f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000100  00000000  00000000  000027b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bdb  00000000  00000000  000028b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035f  00000000  00000000  00003493  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  000037f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00003ed4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000031a  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000690  00000000  00000000  0000439a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 61 04 	call	0x8c2	; 0x8c2 <main>
  8a:	0c 94 ef 05 	jmp	0xbde	; 0xbde <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_vInit>:
#include "ADC.h"

void ADC_vInit(void)
{
	//Enable the interrupt of the ADC specifically 
	SET_BIT(ADCSRA,ADIE);
  92:	33 9a       	sbi	0x06, 3	; 6
	//Define the ADC reference voltage, REFS0 and REFS1 -> Setting the internal valtage= 2.56v as a refernce voltage 
	SET_BIT(ADMUX,REFS0); //configure VREF
  94:	3e 9a       	sbi	0x07, 6	; 7
	SET_BIT(ADMUX,REFS1);
  96:	3f 9a       	sbi	0x07, 7	; 7
	//Enable the ADC
	SET_BIT(ADCSRA,ADEN);
  98:	37 9a       	sbi	0x06, 7	; 6
	//Choose which pin of portA passes to the ADC
	CLR_BIT(ADMUX,MUX0); // pin0 connected to the ADC
  9a:	38 98       	cbi	0x07, 0	; 7
	//Define the ADC clock, the  
	//CLR_BIT(ADCSRA,ADPS0);
	SET_BIT(ADCSRA,ADPS1);
  9c:	31 9a       	sbi	0x06, 1	; 6
	SET_BIT(ADCSRA,ADPS2);
  9e:	32 9a       	sbi	0x06, 2	; 6
	//Now the ADC is working with clock = F_CPU/64
}
  a0:	08 95       	ret

000000a2 <ADC_u16Read>:

unsigned short ADC_u16Read(void)
{
	unsigned short read_val;
	//Start conversion
	SET_BIT(ADCSRA,ADSC);
  a2:	36 9a       	sbi	0x06, 6	; 6
	//Loop until ADC finishes the conversion
	//As the interrupt flag will set to one at the end pf the conversion, then we shall clear it explicitly 
	while(READ_BIT(ADCSRA,ADIF)==0);
  a4:	34 9b       	sbis	0x06, 4	; 6
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <ADC_u16Read+0x2>
	SET_BIT(ADCSRA,ADIF);//Clear the flag 
  a8:	34 9a       	sbi	0x06, 4	; 6
	/** 
	This looping can be done in another way
	-> while(READ_BIT(ADCSRA,ADSC)==1);
	as we know that the ADSC bit will be cleared at the end of the conversion by the ADC
	**/
	read_val = ADCL; //Read ADCL **FIRST** register and store it in the read_val variable
  aa:	84 b1       	in	r24, 0x04	; 4
  ac:	90 e0       	ldi	r25, 0x00	; 0
	read_val |= (ADCH<<8); //Then read ADCH 
  ae:	45 b1       	in	r20, 0x05	; 5
  b0:	34 2f       	mov	r19, r20
  b2:	20 e0       	ldi	r18, 0x00	; 0
  b4:	82 2b       	or	r24, r18
  b6:	93 2b       	or	r25, r19
	return read_val;
	
  b8:	08 95       	ret

000000ba <DIO_vsetPINDIR>:
#include "std_macros.h"
#include "DIO.h"

void DIO_vsetPINDIR(unsigned char portname,unsigned char pinnumber,unsigned char direction) // v stands for the return data type of the function is void 
{
	switch(portname)
  ba:	84 34       	cpi	r24, 0x44	; 68
  bc:	09 f4       	brne	.+2      	; 0xc0 <DIO_vsetPINDIR+0x6>
  be:	71 c0       	rjmp	.+226    	; 0x1a2 <DIO_vsetPINDIR+0xe8>
  c0:	85 34       	cpi	r24, 0x45	; 69
  c2:	48 f4       	brcc	.+18     	; 0xd6 <DIO_vsetPINDIR+0x1c>
  c4:	82 34       	cpi	r24, 0x42	; 66
  c6:	99 f1       	breq	.+102    	; 0x12e <DIO_vsetPINDIR+0x74>
  c8:	83 34       	cpi	r24, 0x43	; 67
  ca:	08 f0       	brcs	.+2      	; 0xce <DIO_vsetPINDIR+0x14>
  cc:	4d c0       	rjmp	.+154    	; 0x168 <DIO_vsetPINDIR+0xae>
  ce:	81 34       	cpi	r24, 0x41	; 65
  d0:	09 f0       	breq	.+2      	; 0xd4 <DIO_vsetPINDIR+0x1a>
  d2:	83 c0       	rjmp	.+262    	; 0x1da <DIO_vsetPINDIR+0x120>
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <DIO_vsetPINDIR+0x3a>
  d6:	82 36       	cpi	r24, 0x62	; 98
  d8:	51 f1       	breq	.+84     	; 0x12e <DIO_vsetPINDIR+0x74>
  da:	83 36       	cpi	r24, 0x63	; 99
  dc:	20 f4       	brcc	.+8      	; 0xe6 <DIO_vsetPINDIR+0x2c>
  de:	81 36       	cpi	r24, 0x61	; 97
  e0:	09 f0       	breq	.+2      	; 0xe4 <DIO_vsetPINDIR+0x2a>
  e2:	7b c0       	rjmp	.+246    	; 0x1da <DIO_vsetPINDIR+0x120>
  e4:	07 c0       	rjmp	.+14     	; 0xf4 <DIO_vsetPINDIR+0x3a>
  e6:	83 36       	cpi	r24, 0x63	; 99
  e8:	09 f4       	brne	.+2      	; 0xec <DIO_vsetPINDIR+0x32>
  ea:	3e c0       	rjmp	.+124    	; 0x168 <DIO_vsetPINDIR+0xae>
  ec:	84 36       	cpi	r24, 0x64	; 100
  ee:	09 f0       	breq	.+2      	; 0xf2 <DIO_vsetPINDIR+0x38>
  f0:	74 c0       	rjmp	.+232    	; 0x1da <DIO_vsetPINDIR+0x120>
  f2:	57 c0       	rjmp	.+174    	; 0x1a2 <DIO_vsetPINDIR+0xe8>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
			if(direction==1)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	69 f4       	brne	.+26     	; 0x112 <DIO_vsetPINDIR+0x58>
			{
				SET_BIT(DDRA,pinnumber); // Set direction of a given pin in PORTA as output 
  f8:	2a b3       	in	r18, 0x1a	; 26
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	ac 01       	movw	r20, r24
 100:	02 c0       	rjmp	.+4      	; 0x106 <DIO_vsetPINDIR+0x4c>
 102:	44 0f       	add	r20, r20
 104:	55 1f       	adc	r21, r21
 106:	6a 95       	dec	r22
 108:	e2 f7       	brpl	.-8      	; 0x102 <DIO_vsetPINDIR+0x48>
 10a:	ba 01       	movw	r22, r20
 10c:	62 2b       	or	r22, r18
 10e:	6a bb       	out	0x1a, r22	; 26
 110:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRA,pinnumber); // Set direction of a given pin in PORTA as input	
 112:	2a b3       	in	r18, 0x1a	; 26
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	ac 01       	movw	r20, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_vsetPINDIR+0x66>
 11c:	44 0f       	add	r20, r20
 11e:	55 1f       	adc	r21, r21
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_vsetPINDIR+0x62>
 124:	ba 01       	movw	r22, r20
 126:	60 95       	com	r22
 128:	62 23       	and	r22, r18
 12a:	6a bb       	out	0x1a, r22	; 26
 12c:	08 95       	ret
			}
		break;
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
			if(direction==1)
 12e:	41 30       	cpi	r20, 0x01	; 1
 130:	69 f4       	brne	.+26     	; 0x14c <DIO_vsetPINDIR+0x92>
			{
				SET_BIT(DDRB,pinnumber); // Set direction of a given pin in PORTB as output
 132:	27 b3       	in	r18, 0x17	; 23
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	ac 01       	movw	r20, r24
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_vsetPINDIR+0x86>
 13c:	44 0f       	add	r20, r20
 13e:	55 1f       	adc	r21, r21
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_vsetPINDIR+0x82>
 144:	ba 01       	movw	r22, r20
 146:	62 2b       	or	r22, r18
 148:	67 bb       	out	0x17, r22	; 23
 14a:	08 95       	ret
 			}
			else
			{
				CLR_BIT(DDRB,pinnumber); // Set direction of a given pin in PORTB as input
 14c:	27 b3       	in	r18, 0x17	; 23
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	ac 01       	movw	r20, r24
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_vsetPINDIR+0xa0>
 156:	44 0f       	add	r20, r20
 158:	55 1f       	adc	r21, r21
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_vsetPINDIR+0x9c>
 15e:	ba 01       	movw	r22, r20
 160:	60 95       	com	r22
 162:	62 23       	and	r22, r18
 164:	67 bb       	out	0x17, r22	; 23
 166:	08 95       	ret
			}
		break;
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
			if(direction==1)
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	69 f4       	brne	.+26     	; 0x186 <DIO_vsetPINDIR+0xcc>
			{
				SET_BIT(DDRC,pinnumber); // Set direction of a given pin in PORTC as output
 16c:	24 b3       	in	r18, 0x14	; 20
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	ac 01       	movw	r20, r24
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_vsetPINDIR+0xc0>
 176:	44 0f       	add	r20, r20
 178:	55 1f       	adc	r21, r21
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_vsetPINDIR+0xbc>
 17e:	ba 01       	movw	r22, r20
 180:	62 2b       	or	r22, r18
 182:	64 bb       	out	0x14, r22	; 20
 184:	08 95       	ret
			}
			else 
			{
				CLR_BIT(DDRC,pinnumber); // Set direction of a given pin in PORTC as input
 186:	24 b3       	in	r18, 0x14	; 20
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	ac 01       	movw	r20, r24
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_vsetPINDIR+0xda>
 190:	44 0f       	add	r20, r20
 192:	55 1f       	adc	r21, r21
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_vsetPINDIR+0xd6>
 198:	ba 01       	movw	r22, r20
 19a:	60 95       	com	r22
 19c:	62 23       	and	r22, r18
 19e:	64 bb       	out	0x14, r22	; 20
 1a0:	08 95       	ret
			}
		break;
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
			if(direction==1)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	69 f4       	brne	.+26     	; 0x1c0 <DIO_vsetPINDIR+0x106>
			{
				SET_BIT(DDRD,pinnumber); // Set direction of a given pin in PORTD as output
 1a6:	21 b3       	in	r18, 0x11	; 17
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	ac 01       	movw	r20, r24
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_vsetPINDIR+0xfa>
 1b0:	44 0f       	add	r20, r20
 1b2:	55 1f       	adc	r21, r21
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_vsetPINDIR+0xf6>
 1b8:	ba 01       	movw	r22, r20
 1ba:	62 2b       	or	r22, r18
 1bc:	61 bb       	out	0x11, r22	; 17
 1be:	08 95       	ret
			}
			else
			{
				CLR_BIT(DDRD,pinnumber); // Set direction of a given pin in PORTD as input
 1c0:	21 b3       	in	r18, 0x11	; 17
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	ac 01       	movw	r20, r24
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_vsetPINDIR+0x114>
 1ca:	44 0f       	add	r20, r20
 1cc:	55 1f       	adc	r21, r21
 1ce:	6a 95       	dec	r22
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_vsetPINDIR+0x110>
 1d2:	ba 01       	movw	r22, r20
 1d4:	60 95       	com	r22
 1d6:	62 23       	and	r22, r18
 1d8:	61 bb       	out	0x11, r22	; 17
 1da:	08 95       	ret

000001dc <DIO_vwritePIN>:
		break;
	}
}
void DIO_vwritePIN(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue) // v stands for the return data type of the function is void 
{
	switch(portname)
 1dc:	84 34       	cpi	r24, 0x44	; 68
 1de:	09 f4       	brne	.+2      	; 0x1e2 <DIO_vwritePIN+0x6>
 1e0:	71 c0       	rjmp	.+226    	; 0x2c4 <DIO_vwritePIN+0xe8>
 1e2:	85 34       	cpi	r24, 0x45	; 69
 1e4:	48 f4       	brcc	.+18     	; 0x1f8 <DIO_vwritePIN+0x1c>
 1e6:	82 34       	cpi	r24, 0x42	; 66
 1e8:	99 f1       	breq	.+102    	; 0x250 <DIO_vwritePIN+0x74>
 1ea:	83 34       	cpi	r24, 0x43	; 67
 1ec:	08 f0       	brcs	.+2      	; 0x1f0 <DIO_vwritePIN+0x14>
 1ee:	4d c0       	rjmp	.+154    	; 0x28a <DIO_vwritePIN+0xae>
 1f0:	81 34       	cpi	r24, 0x41	; 65
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <DIO_vwritePIN+0x1a>
 1f4:	83 c0       	rjmp	.+262    	; 0x2fc <DIO_vwritePIN+0x120>
 1f6:	0f c0       	rjmp	.+30     	; 0x216 <DIO_vwritePIN+0x3a>
 1f8:	82 36       	cpi	r24, 0x62	; 98
 1fa:	51 f1       	breq	.+84     	; 0x250 <DIO_vwritePIN+0x74>
 1fc:	83 36       	cpi	r24, 0x63	; 99
 1fe:	20 f4       	brcc	.+8      	; 0x208 <DIO_vwritePIN+0x2c>
 200:	81 36       	cpi	r24, 0x61	; 97
 202:	09 f0       	breq	.+2      	; 0x206 <DIO_vwritePIN+0x2a>
 204:	7b c0       	rjmp	.+246    	; 0x2fc <DIO_vwritePIN+0x120>
 206:	07 c0       	rjmp	.+14     	; 0x216 <DIO_vwritePIN+0x3a>
 208:	83 36       	cpi	r24, 0x63	; 99
 20a:	09 f4       	brne	.+2      	; 0x20e <DIO_vwritePIN+0x32>
 20c:	3e c0       	rjmp	.+124    	; 0x28a <DIO_vwritePIN+0xae>
 20e:	84 36       	cpi	r24, 0x64	; 100
 210:	09 f0       	breq	.+2      	; 0x214 <DIO_vwritePIN+0x38>
 212:	74 c0       	rjmp	.+232    	; 0x2fc <DIO_vwritePIN+0x120>
 214:	57 c0       	rjmp	.+174    	; 0x2c4 <DIO_vwritePIN+0xe8>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
			if(outputvalue==1)
 216:	41 30       	cpi	r20, 0x01	; 1
 218:	69 f4       	brne	.+26     	; 0x234 <DIO_vwritePIN+0x58>
			{
				SET_BIT(PORTA,pinnumber); // Set the value of a given pin in PORTA as HIGH
 21a:	2b b3       	in	r18, 0x1b	; 27
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	ac 01       	movw	r20, r24
 222:	02 c0       	rjmp	.+4      	; 0x228 <DIO_vwritePIN+0x4c>
 224:	44 0f       	add	r20, r20
 226:	55 1f       	adc	r21, r21
 228:	6a 95       	dec	r22
 22a:	e2 f7       	brpl	.-8      	; 0x224 <DIO_vwritePIN+0x48>
 22c:	ba 01       	movw	r22, r20
 22e:	62 2b       	or	r22, r18
 230:	6b bb       	out	0x1b, r22	; 27
 232:	08 95       	ret
			}
			else 
			{
				CLR_BIT(PORTA,pinnumber); // Set the value of a given pin in PORTA as LOW
 234:	2b b3       	in	r18, 0x1b	; 27
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	ac 01       	movw	r20, r24
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_vwritePIN+0x66>
 23e:	44 0f       	add	r20, r20
 240:	55 1f       	adc	r21, r21
 242:	6a 95       	dec	r22
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_vwritePIN+0x62>
 246:	ba 01       	movw	r22, r20
 248:	60 95       	com	r22
 24a:	62 23       	and	r22, r18
 24c:	6b bb       	out	0x1b, r22	; 27
 24e:	08 95       	ret
			}
		break;
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
			if(outputvalue==1)
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	69 f4       	brne	.+26     	; 0x26e <DIO_vwritePIN+0x92>
			{
				SET_BIT(PORTB,pinnumber); // Set the value of a given pin in PORTB as HIGH
 254:	28 b3       	in	r18, 0x18	; 24
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	ac 01       	movw	r20, r24
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_vwritePIN+0x86>
 25e:	44 0f       	add	r20, r20
 260:	55 1f       	adc	r21, r21
 262:	6a 95       	dec	r22
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_vwritePIN+0x82>
 266:	ba 01       	movw	r22, r20
 268:	62 2b       	or	r22, r18
 26a:	68 bb       	out	0x18, r22	; 24
 26c:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,pinnumber); // Set the value of a given pin in PORTB as LOW
 26e:	28 b3       	in	r18, 0x18	; 24
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	ac 01       	movw	r20, r24
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_vwritePIN+0xa0>
 278:	44 0f       	add	r20, r20
 27a:	55 1f       	adc	r21, r21
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_vwritePIN+0x9c>
 280:	ba 01       	movw	r22, r20
 282:	60 95       	com	r22
 284:	62 23       	and	r22, r18
 286:	68 bb       	out	0x18, r22	; 24
 288:	08 95       	ret
			}
		break;
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
			if (outputvalue==1)
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	69 f4       	brne	.+26     	; 0x2a8 <DIO_vwritePIN+0xcc>
			{
				SET_BIT(PORTC,pinnumber);// Set the value of a given pin in PORTC as HIGH
 28e:	25 b3       	in	r18, 0x15	; 21
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	ac 01       	movw	r20, r24
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_vwritePIN+0xc0>
 298:	44 0f       	add	r20, r20
 29a:	55 1f       	adc	r21, r21
 29c:	6a 95       	dec	r22
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_vwritePIN+0xbc>
 2a0:	ba 01       	movw	r22, r20
 2a2:	62 2b       	or	r22, r18
 2a4:	65 bb       	out	0x15, r22	; 21
 2a6:	08 95       	ret
			}
			else 
			{
				CLR_BIT(PORTC,pinnumber); // Set the value of a given pin in PORTC as LOW
 2a8:	25 b3       	in	r18, 0x15	; 21
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	ac 01       	movw	r20, r24
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_vwritePIN+0xda>
 2b2:	44 0f       	add	r20, r20
 2b4:	55 1f       	adc	r21, r21
 2b6:	6a 95       	dec	r22
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_vwritePIN+0xd6>
 2ba:	ba 01       	movw	r22, r20
 2bc:	60 95       	com	r22
 2be:	62 23       	and	r22, r18
 2c0:	65 bb       	out	0x15, r22	; 21
 2c2:	08 95       	ret
			}
		break;
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
			if (outputvalue==1)
 2c4:	41 30       	cpi	r20, 0x01	; 1
 2c6:	69 f4       	brne	.+26     	; 0x2e2 <DIO_vwritePIN+0x106>
			{
				SET_BIT(PORTD,pinnumber); // Set the value of a given pin in PORTD as HIGH
 2c8:	22 b3       	in	r18, 0x12	; 18
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	ac 01       	movw	r20, r24
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_vwritePIN+0xfa>
 2d2:	44 0f       	add	r20, r20
 2d4:	55 1f       	adc	r21, r21
 2d6:	6a 95       	dec	r22
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_vwritePIN+0xf6>
 2da:	ba 01       	movw	r22, r20
 2dc:	62 2b       	or	r22, r18
 2de:	62 bb       	out	0x12, r22	; 18
 2e0:	08 95       	ret
			}
			else 
			{
				CLR_BIT(PORTD,pinnumber); // Set the value of a given pin in PORTD as LOW
 2e2:	22 b3       	in	r18, 0x12	; 18
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	90 e0       	ldi	r25, 0x00	; 0
 2e8:	ac 01       	movw	r20, r24
 2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DIO_vwritePIN+0x114>
 2ec:	44 0f       	add	r20, r20
 2ee:	55 1f       	adc	r21, r21
 2f0:	6a 95       	dec	r22
 2f2:	e2 f7       	brpl	.-8      	; 0x2ec <DIO_vwritePIN+0x110>
 2f4:	ba 01       	movw	r22, r20
 2f6:	60 95       	com	r22
 2f8:	62 23       	and	r22, r18
 2fa:	62 bb       	out	0x12, r22	; 18
 2fc:	08 95       	ret

000002fe <DIO_vtogglePIN>:
		break;
	}
}
void DIO_vtogglePIN(unsigned char portname,unsigned char pinnumber) // v stands for the return data type of the function is void  
{
	switch(portname)
 2fe:	84 34       	cpi	r24, 0x44	; 68
 300:	09 f4       	brne	.+2      	; 0x304 <DIO_vtogglePIN+0x6>
 302:	3d c0       	rjmp	.+122    	; 0x37e <DIO_vtogglePIN+0x80>
 304:	85 34       	cpi	r24, 0x45	; 69
 306:	40 f4       	brcc	.+16     	; 0x318 <DIO_vtogglePIN+0x1a>
 308:	82 34       	cpi	r24, 0x42	; 66
 30a:	f9 f0       	breq	.+62     	; 0x34a <DIO_vtogglePIN+0x4c>
 30c:	83 34       	cpi	r24, 0x43	; 67
 30e:	50 f5       	brcc	.+84     	; 0x364 <DIO_vtogglePIN+0x66>
 310:	81 34       	cpi	r24, 0x41	; 65
 312:	09 f0       	breq	.+2      	; 0x316 <DIO_vtogglePIN+0x18>
 314:	40 c0       	rjmp	.+128    	; 0x396 <DIO_vtogglePIN+0x98>
 316:	0c c0       	rjmp	.+24     	; 0x330 <DIO_vtogglePIN+0x32>
 318:	82 36       	cpi	r24, 0x62	; 98
 31a:	b9 f0       	breq	.+46     	; 0x34a <DIO_vtogglePIN+0x4c>
 31c:	83 36       	cpi	r24, 0x63	; 99
 31e:	18 f4       	brcc	.+6      	; 0x326 <DIO_vtogglePIN+0x28>
 320:	81 36       	cpi	r24, 0x61	; 97
 322:	c9 f5       	brne	.+114    	; 0x396 <DIO_vtogglePIN+0x98>
 324:	05 c0       	rjmp	.+10     	; 0x330 <DIO_vtogglePIN+0x32>
 326:	83 36       	cpi	r24, 0x63	; 99
 328:	e9 f0       	breq	.+58     	; 0x364 <DIO_vtogglePIN+0x66>
 32a:	84 36       	cpi	r24, 0x64	; 100
 32c:	a1 f5       	brne	.+104    	; 0x396 <DIO_vtogglePIN+0x98>
 32e:	27 c0       	rjmp	.+78     	; 0x37e <DIO_vtogglePIN+0x80>
	{
		case 'A': 
		// Case the user inputs a as a small litter not the capital one
		case 'a':
			TOG_BIT(PORTA,pinnumber); // Toggle the value of a given pin in portA
 330:	2b b3       	in	r18, 0x1b	; 27
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	ac 01       	movw	r20, r24
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_vtogglePIN+0x40>
 33a:	44 0f       	add	r20, r20
 33c:	55 1f       	adc	r21, r21
 33e:	6a 95       	dec	r22
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_vtogglePIN+0x3c>
 342:	ba 01       	movw	r22, r20
 344:	62 27       	eor	r22, r18
 346:	6b bb       	out	0x1b, r22	; 27
		break;
 348:	08 95       	ret
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
			TOG_BIT(PORTB,pinnumber); // Toggle the value of a given pin in portB
 34a:	28 b3       	in	r18, 0x18	; 24
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	ac 01       	movw	r20, r24
 352:	02 c0       	rjmp	.+4      	; 0x358 <DIO_vtogglePIN+0x5a>
 354:	44 0f       	add	r20, r20
 356:	55 1f       	adc	r21, r21
 358:	6a 95       	dec	r22
 35a:	e2 f7       	brpl	.-8      	; 0x354 <DIO_vtogglePIN+0x56>
 35c:	ba 01       	movw	r22, r20
 35e:	62 27       	eor	r22, r18
 360:	68 bb       	out	0x18, r22	; 24
		break;
 362:	08 95       	ret
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
			TOG_BIT(PORTC,pinnumber); // Toggle the value of a given pin in portC
 364:	25 b3       	in	r18, 0x15	; 21
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	ac 01       	movw	r20, r24
 36c:	02 c0       	rjmp	.+4      	; 0x372 <DIO_vtogglePIN+0x74>
 36e:	44 0f       	add	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	6a 95       	dec	r22
 374:	e2 f7       	brpl	.-8      	; 0x36e <DIO_vtogglePIN+0x70>
 376:	ba 01       	movw	r22, r20
 378:	62 27       	eor	r22, r18
 37a:	65 bb       	out	0x15, r22	; 21
		break;
 37c:	08 95       	ret
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
			TOG_BIT(PORTD,pinnumber); // Toggle the value of a given pin in portD
 37e:	22 b3       	in	r18, 0x12	; 18
 380:	81 e0       	ldi	r24, 0x01	; 1
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	ac 01       	movw	r20, r24
 386:	02 c0       	rjmp	.+4      	; 0x38c <DIO_vtogglePIN+0x8e>
 388:	44 0f       	add	r20, r20
 38a:	55 1f       	adc	r21, r21
 38c:	6a 95       	dec	r22
 38e:	e2 f7       	brpl	.-8      	; 0x388 <DIO_vtogglePIN+0x8a>
 390:	ba 01       	movw	r22, r20
 392:	62 27       	eor	r22, r18
 394:	62 bb       	out	0x12, r22	; 18
 396:	08 95       	ret

00000398 <DIO_u8readPIN>:
	}
}
unsigned char DIO_u8readPIN(unsigned char portname,unsigned char pinnumber)// u8 stands for the return data type of the function is unsigned char 
{
	unsigned char return_value;
	switch(portname)
 398:	84 34       	cpi	r24, 0x44	; 68
 39a:	09 f4       	brne	.+2      	; 0x39e <DIO_u8readPIN+0x6>
 39c:	51 c0       	rjmp	.+162    	; 0x440 <DIO_u8readPIN+0xa8>
 39e:	85 34       	cpi	r24, 0x45	; 69
 3a0:	40 f4       	brcc	.+16     	; 0x3b2 <DIO_u8readPIN+0x1a>
 3a2:	82 34       	cpi	r24, 0x42	; 66
 3a4:	39 f1       	breq	.+78     	; 0x3f4 <DIO_u8readPIN+0x5c>
 3a6:	83 34       	cpi	r24, 0x43	; 67
 3a8:	c0 f5       	brcc	.+112    	; 0x41a <DIO_u8readPIN+0x82>
 3aa:	81 34       	cpi	r24, 0x41	; 65
 3ac:	09 f0       	breq	.+2      	; 0x3b0 <DIO_u8readPIN+0x18>
 3ae:	5a c0       	rjmp	.+180    	; 0x464 <DIO_u8readPIN+0xcc>
 3b0:	0e c0       	rjmp	.+28     	; 0x3ce <DIO_u8readPIN+0x36>
 3b2:	82 36       	cpi	r24, 0x62	; 98
 3b4:	f9 f0       	breq	.+62     	; 0x3f4 <DIO_u8readPIN+0x5c>
 3b6:	83 36       	cpi	r24, 0x63	; 99
 3b8:	20 f4       	brcc	.+8      	; 0x3c2 <DIO_u8readPIN+0x2a>
 3ba:	81 36       	cpi	r24, 0x61	; 97
 3bc:	09 f0       	breq	.+2      	; 0x3c0 <DIO_u8readPIN+0x28>
 3be:	52 c0       	rjmp	.+164    	; 0x464 <DIO_u8readPIN+0xcc>
 3c0:	06 c0       	rjmp	.+12     	; 0x3ce <DIO_u8readPIN+0x36>
 3c2:	83 36       	cpi	r24, 0x63	; 99
 3c4:	51 f1       	breq	.+84     	; 0x41a <DIO_u8readPIN+0x82>
 3c6:	84 36       	cpi	r24, 0x64	; 100
 3c8:	09 f0       	breq	.+2      	; 0x3cc <DIO_u8readPIN+0x34>
 3ca:	4c c0       	rjmp	.+152    	; 0x464 <DIO_u8readPIN+0xcc>
 3cc:	39 c0       	rjmp	.+114    	; 0x440 <DIO_u8readPIN+0xa8>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
			return_value = READ_BIT(PINA,pinnumber); // Read the value from the given pin in PORTA
 3ce:	29 b3       	in	r18, 0x19	; 25
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	06 2e       	mov	r0, r22
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_u8readPIN+0x44>
 3d8:	88 0f       	add	r24, r24
 3da:	99 1f       	adc	r25, r25
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_u8readPIN+0x40>
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	82 23       	and	r24, r18
 3e4:	93 23       	and	r25, r19
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_u8readPIN+0x54>
 3e8:	96 95       	lsr	r25
 3ea:	87 95       	ror	r24
 3ec:	6a 95       	dec	r22
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_u8readPIN+0x50>
 3f0:	98 2f       	mov	r25, r24
		break;
 3f2:	38 c0       	rjmp	.+112    	; 0x464 <DIO_u8readPIN+0xcc>
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
			return_value = READ_BIT(PINB,pinnumber); // Read the value from the given pin in PORTB
 3f4:	26 b3       	in	r18, 0x16	; 22
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	06 2e       	mov	r0, r22
 3fc:	02 c0       	rjmp	.+4      	; 0x402 <DIO_u8readPIN+0x6a>
 3fe:	88 0f       	add	r24, r24
 400:	99 1f       	adc	r25, r25
 402:	0a 94       	dec	r0
 404:	e2 f7       	brpl	.-8      	; 0x3fe <DIO_u8readPIN+0x66>
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	82 23       	and	r24, r18
 40a:	93 23       	and	r25, r19
 40c:	02 c0       	rjmp	.+4      	; 0x412 <DIO_u8readPIN+0x7a>
 40e:	96 95       	lsr	r25
 410:	87 95       	ror	r24
 412:	6a 95       	dec	r22
 414:	e2 f7       	brpl	.-8      	; 0x40e <DIO_u8readPIN+0x76>
 416:	98 2f       	mov	r25, r24
		break;
 418:	25 c0       	rjmp	.+74     	; 0x464 <DIO_u8readPIN+0xcc>
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
			return_value = READ_BIT(PINC,pinnumber); // Read the value from the given pin in PORTC
 41a:	23 b3       	in	r18, 0x13	; 19
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	06 2e       	mov	r0, r22
 422:	02 c0       	rjmp	.+4      	; 0x428 <DIO_u8readPIN+0x90>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	0a 94       	dec	r0
 42a:	e2 f7       	brpl	.-8      	; 0x424 <DIO_u8readPIN+0x8c>
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	82 23       	and	r24, r18
 430:	93 23       	and	r25, r19
 432:	02 c0       	rjmp	.+4      	; 0x438 <DIO_u8readPIN+0xa0>
 434:	96 95       	lsr	r25
 436:	87 95       	ror	r24
 438:	6a 95       	dec	r22
 43a:	e2 f7       	brpl	.-8      	; 0x434 <DIO_u8readPIN+0x9c>
 43c:	98 2f       	mov	r25, r24
		break;
 43e:	12 c0       	rjmp	.+36     	; 0x464 <DIO_u8readPIN+0xcc>
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
			return_value = READ_BIT(PIND,pinnumber); // Read the value from the given pin in PORTD
 440:	20 b3       	in	r18, 0x10	; 16
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	06 2e       	mov	r0, r22
 448:	02 c0       	rjmp	.+4      	; 0x44e <DIO_u8readPIN+0xb6>
 44a:	88 0f       	add	r24, r24
 44c:	99 1f       	adc	r25, r25
 44e:	0a 94       	dec	r0
 450:	e2 f7       	brpl	.-8      	; 0x44a <DIO_u8readPIN+0xb2>
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	82 23       	and	r24, r18
 456:	93 23       	and	r25, r19
 458:	02 c0       	rjmp	.+4      	; 0x45e <DIO_u8readPIN+0xc6>
 45a:	96 95       	lsr	r25
 45c:	87 95       	ror	r24
 45e:	6a 95       	dec	r22
 460:	e2 f7       	brpl	.-8      	; 0x45a <DIO_u8readPIN+0xc2>
 462:	98 2f       	mov	r25, r24
		break;
	}
	return return_value;
}
 464:	89 2f       	mov	r24, r25
 466:	08 95       	ret

00000468 <DIO_vsetPORTDIR>:
void DIO_vsetPORTDIR(unsigned char portname,unsigned char direction)// v stands for the return data type of the function is void 
{
	switch(portname)
 468:	84 34       	cpi	r24, 0x44	; 68
 46a:	d9 f0       	breq	.+54     	; 0x4a2 <DIO_vsetPORTDIR+0x3a>
 46c:	85 34       	cpi	r24, 0x45	; 69
 46e:	38 f4       	brcc	.+14     	; 0x47e <DIO_vsetPORTDIR+0x16>
 470:	82 34       	cpi	r24, 0x42	; 66
 472:	99 f0       	breq	.+38     	; 0x49a <DIO_vsetPORTDIR+0x32>
 474:	83 34       	cpi	r24, 0x43	; 67
 476:	98 f4       	brcc	.+38     	; 0x49e <DIO_vsetPORTDIR+0x36>
 478:	81 34       	cpi	r24, 0x41	; 65
 47a:	a1 f4       	brne	.+40     	; 0x4a4 <DIO_vsetPORTDIR+0x3c>
 47c:	0c c0       	rjmp	.+24     	; 0x496 <DIO_vsetPORTDIR+0x2e>
 47e:	82 36       	cpi	r24, 0x62	; 98
 480:	61 f0       	breq	.+24     	; 0x49a <DIO_vsetPORTDIR+0x32>
 482:	83 36       	cpi	r24, 0x63	; 99
 484:	18 f4       	brcc	.+6      	; 0x48c <DIO_vsetPORTDIR+0x24>
 486:	81 36       	cpi	r24, 0x61	; 97
 488:	69 f4       	brne	.+26     	; 0x4a4 <DIO_vsetPORTDIR+0x3c>
 48a:	05 c0       	rjmp	.+10     	; 0x496 <DIO_vsetPORTDIR+0x2e>
 48c:	83 36       	cpi	r24, 0x63	; 99
 48e:	39 f0       	breq	.+14     	; 0x49e <DIO_vsetPORTDIR+0x36>
 490:	84 36       	cpi	r24, 0x64	; 100
 492:	41 f4       	brne	.+16     	; 0x4a4 <DIO_vsetPORTDIR+0x3c>
 494:	06 c0       	rjmp	.+12     	; 0x4a2 <DIO_vsetPORTDIR+0x3a>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
			DDRA = direction;  // Set direction of PORTA
 496:	6a bb       	out	0x1a, r22	; 26
		break;
 498:	08 95       	ret
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
			DDRB = direction; // Set direction of PORTB
 49a:	67 bb       	out	0x17, r22	; 23
		break;
 49c:	08 95       	ret
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
			DDRC = direction; // Set direction of PORTC
 49e:	64 bb       	out	0x14, r22	; 20
		break;
 4a0:	08 95       	ret
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
			DDRD = direction; // Set direction of PORTD
 4a2:	61 bb       	out	0x11, r22	; 17
 4a4:	08 95       	ret

000004a6 <DIO_vwritePORT>:
		break;	
	}
}
void DIO_vwritePORT(unsigned char portname,unsigned char outputvalue)// v stands for the return data type of the function is void 
{
	switch(portname)
 4a6:	84 34       	cpi	r24, 0x44	; 68
 4a8:	d9 f0       	breq	.+54     	; 0x4e0 <DIO_vwritePORT+0x3a>
 4aa:	85 34       	cpi	r24, 0x45	; 69
 4ac:	38 f4       	brcc	.+14     	; 0x4bc <DIO_vwritePORT+0x16>
 4ae:	82 34       	cpi	r24, 0x42	; 66
 4b0:	99 f0       	breq	.+38     	; 0x4d8 <DIO_vwritePORT+0x32>
 4b2:	83 34       	cpi	r24, 0x43	; 67
 4b4:	98 f4       	brcc	.+38     	; 0x4dc <DIO_vwritePORT+0x36>
 4b6:	81 34       	cpi	r24, 0x41	; 65
 4b8:	a1 f4       	brne	.+40     	; 0x4e2 <DIO_vwritePORT+0x3c>
 4ba:	0c c0       	rjmp	.+24     	; 0x4d4 <DIO_vwritePORT+0x2e>
 4bc:	82 36       	cpi	r24, 0x62	; 98
 4be:	61 f0       	breq	.+24     	; 0x4d8 <DIO_vwritePORT+0x32>
 4c0:	83 36       	cpi	r24, 0x63	; 99
 4c2:	18 f4       	brcc	.+6      	; 0x4ca <DIO_vwritePORT+0x24>
 4c4:	81 36       	cpi	r24, 0x61	; 97
 4c6:	69 f4       	brne	.+26     	; 0x4e2 <DIO_vwritePORT+0x3c>
 4c8:	05 c0       	rjmp	.+10     	; 0x4d4 <DIO_vwritePORT+0x2e>
 4ca:	83 36       	cpi	r24, 0x63	; 99
 4cc:	39 f0       	breq	.+14     	; 0x4dc <DIO_vwritePORT+0x36>
 4ce:	84 36       	cpi	r24, 0x64	; 100
 4d0:	41 f4       	brne	.+16     	; 0x4e2 <DIO_vwritePORT+0x3c>
 4d2:	06 c0       	rjmp	.+12     	; 0x4e0 <DIO_vwritePORT+0x3a>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
			PORTA = outputvalue; // Write the value of PORTA
 4d4:	6b bb       	out	0x1b, r22	; 27
		break;
 4d6:	08 95       	ret
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
			PORTB = outputvalue;// Write the value of PORTB
 4d8:	68 bb       	out	0x18, r22	; 24
		break;
 4da:	08 95       	ret
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
			PORTC = outputvalue;// Write the value of PORTC
 4dc:	65 bb       	out	0x15, r22	; 21
		break;
 4de:	08 95       	ret
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
			PORTD = outputvalue;// Write the value of PORTD
 4e0:	62 bb       	out	0x12, r22	; 18
 4e2:	08 95       	ret

000004e4 <DIO_vtogglePORT>:
		break;
	}
}
void DIO_vtogglePORT(unsigned char portname)// v stands for the return data type of the function is void 
{
	switch(portname)
 4e4:	84 34       	cpi	r24, 0x44	; 68
 4e6:	09 f1       	breq	.+66     	; 0x52a <DIO_vtogglePORT+0x46>
 4e8:	85 34       	cpi	r24, 0x45	; 69
 4ea:	38 f4       	brcc	.+14     	; 0x4fa <DIO_vtogglePORT+0x16>
 4ec:	82 34       	cpi	r24, 0x42	; 66
 4ee:	a9 f0       	breq	.+42     	; 0x51a <DIO_vtogglePORT+0x36>
 4f0:	83 34       	cpi	r24, 0x43	; 67
 4f2:	b8 f4       	brcc	.+46     	; 0x522 <DIO_vtogglePORT+0x3e>
 4f4:	81 34       	cpi	r24, 0x41	; 65
 4f6:	e1 f4       	brne	.+56     	; 0x530 <DIO_vtogglePORT+0x4c>
 4f8:	0c c0       	rjmp	.+24     	; 0x512 <DIO_vtogglePORT+0x2e>
 4fa:	82 36       	cpi	r24, 0x62	; 98
 4fc:	71 f0       	breq	.+28     	; 0x51a <DIO_vtogglePORT+0x36>
 4fe:	83 36       	cpi	r24, 0x63	; 99
 500:	18 f4       	brcc	.+6      	; 0x508 <DIO_vtogglePORT+0x24>
 502:	81 36       	cpi	r24, 0x61	; 97
 504:	a9 f4       	brne	.+42     	; 0x530 <DIO_vtogglePORT+0x4c>
 506:	05 c0       	rjmp	.+10     	; 0x512 <DIO_vtogglePORT+0x2e>
 508:	83 36       	cpi	r24, 0x63	; 99
 50a:	59 f0       	breq	.+22     	; 0x522 <DIO_vtogglePORT+0x3e>
 50c:	84 36       	cpi	r24, 0x64	; 100
 50e:	81 f4       	brne	.+32     	; 0x530 <DIO_vtogglePORT+0x4c>
 510:	0c c0       	rjmp	.+24     	; 0x52a <DIO_vtogglePORT+0x46>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
			PORTA = ~PORTA;// (PORTA^=0xff) Toggle PORTA 
 512:	8b b3       	in	r24, 0x1b	; 27
 514:	80 95       	com	r24
 516:	8b bb       	out	0x1b, r24	; 27
		break;
 518:	08 95       	ret
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
			PORTB = ~PORTB;// (PORTB^=0xff) Toggle PORTB
 51a:	88 b3       	in	r24, 0x18	; 24
 51c:	80 95       	com	r24
 51e:	88 bb       	out	0x18, r24	; 24
		break;
 520:	08 95       	ret
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
			PORTC = ~PORTC;// (PORTC^=0xff) Toggle PORTC
 522:	85 b3       	in	r24, 0x15	; 21
 524:	80 95       	com	r24
 526:	85 bb       	out	0x15, r24	; 21
		break;
 528:	08 95       	ret
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
			PORTD = ~PORTD;// (PORTD^=0xff) Toggle PORTD
 52a:	82 b3       	in	r24, 0x12	; 18
 52c:	80 95       	com	r24
 52e:	82 bb       	out	0x12, r24	; 18
 530:	08 95       	ret

00000532 <DIO_u8readPORT>:
	}
}
unsigned char DIO_u8readPORT(unsigned char portname)// u8 stands for the return data type of the function is unsigned char
{
	unsigned char return_value;
	switch(portname)
 532:	84 34       	cpi	r24, 0x44	; 68
 534:	d9 f0       	breq	.+54     	; 0x56c <DIO_u8readPORT+0x3a>
 536:	85 34       	cpi	r24, 0x45	; 69
 538:	38 f4       	brcc	.+14     	; 0x548 <DIO_u8readPORT+0x16>
 53a:	82 34       	cpi	r24, 0x42	; 66
 53c:	99 f0       	breq	.+38     	; 0x564 <DIO_u8readPORT+0x32>
 53e:	83 34       	cpi	r24, 0x43	; 67
 540:	98 f4       	brcc	.+38     	; 0x568 <DIO_u8readPORT+0x36>
 542:	81 34       	cpi	r24, 0x41	; 65
 544:	a1 f4       	brne	.+40     	; 0x56e <DIO_u8readPORT+0x3c>
 546:	0c c0       	rjmp	.+24     	; 0x560 <DIO_u8readPORT+0x2e>
 548:	82 36       	cpi	r24, 0x62	; 98
 54a:	61 f0       	breq	.+24     	; 0x564 <DIO_u8readPORT+0x32>
 54c:	83 36       	cpi	r24, 0x63	; 99
 54e:	18 f4       	brcc	.+6      	; 0x556 <DIO_u8readPORT+0x24>
 550:	81 36       	cpi	r24, 0x61	; 97
 552:	69 f4       	brne	.+26     	; 0x56e <DIO_u8readPORT+0x3c>
 554:	05 c0       	rjmp	.+10     	; 0x560 <DIO_u8readPORT+0x2e>
 556:	83 36       	cpi	r24, 0x63	; 99
 558:	39 f0       	breq	.+14     	; 0x568 <DIO_u8readPORT+0x36>
 55a:	84 36       	cpi	r24, 0x64	; 100
 55c:	41 f4       	brne	.+16     	; 0x56e <DIO_u8readPORT+0x3c>
 55e:	06 c0       	rjmp	.+12     	; 0x56c <DIO_u8readPORT+0x3a>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
			return_value = PINA;// Read the value of PORTA
 560:	89 b3       	in	r24, 0x19	; 25
		break;
 562:	08 95       	ret
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
			return_value = PINB;// Read the value of PORTB
 564:	86 b3       	in	r24, 0x16	; 22
		break;
 566:	08 95       	ret
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
			return_value = PINC;// Read the value of PORTC
 568:	83 b3       	in	r24, 0x13	; 19
		break;
 56a:	08 95       	ret
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
			return_value = PIND;// Read the value of PORTD
 56c:	80 b3       	in	r24, 0x10	; 16
		break;
	}
}
 56e:	08 95       	ret

00000570 <DIO_vconnectInternalPULLUP>:
void DIO_vconnectInternalPULLUP(unsigned char portname, unsigned char pinnumber, unsigned char connect_value) // v stands for the return data type of the function is void 
//Connect_value equals one if i want to enable the internal pull up and zero if i disabled it after the enabling 
{
	switch (portname)
 570:	84 34       	cpi	r24, 0x44	; 68
 572:	09 f4       	brne	.+2      	; 0x576 <DIO_vconnectInternalPULLUP+0x6>
 574:	71 c0       	rjmp	.+226    	; 0x658 <DIO_vconnectInternalPULLUP+0xe8>
 576:	85 34       	cpi	r24, 0x45	; 69
 578:	48 f4       	brcc	.+18     	; 0x58c <DIO_vconnectInternalPULLUP+0x1c>
 57a:	82 34       	cpi	r24, 0x42	; 66
 57c:	99 f1       	breq	.+102    	; 0x5e4 <DIO_vconnectInternalPULLUP+0x74>
 57e:	83 34       	cpi	r24, 0x43	; 67
 580:	08 f0       	brcs	.+2      	; 0x584 <DIO_vconnectInternalPULLUP+0x14>
 582:	4d c0       	rjmp	.+154    	; 0x61e <DIO_vconnectInternalPULLUP+0xae>
 584:	81 34       	cpi	r24, 0x41	; 65
 586:	09 f0       	breq	.+2      	; 0x58a <DIO_vconnectInternalPULLUP+0x1a>
 588:	83 c0       	rjmp	.+262    	; 0x690 <DIO_vconnectInternalPULLUP+0x120>
 58a:	0f c0       	rjmp	.+30     	; 0x5aa <DIO_vconnectInternalPULLUP+0x3a>
 58c:	82 36       	cpi	r24, 0x62	; 98
 58e:	51 f1       	breq	.+84     	; 0x5e4 <DIO_vconnectInternalPULLUP+0x74>
 590:	83 36       	cpi	r24, 0x63	; 99
 592:	20 f4       	brcc	.+8      	; 0x59c <DIO_vconnectInternalPULLUP+0x2c>
 594:	81 36       	cpi	r24, 0x61	; 97
 596:	09 f0       	breq	.+2      	; 0x59a <DIO_vconnectInternalPULLUP+0x2a>
 598:	7b c0       	rjmp	.+246    	; 0x690 <DIO_vconnectInternalPULLUP+0x120>
 59a:	07 c0       	rjmp	.+14     	; 0x5aa <DIO_vconnectInternalPULLUP+0x3a>
 59c:	83 36       	cpi	r24, 0x63	; 99
 59e:	09 f4       	brne	.+2      	; 0x5a2 <DIO_vconnectInternalPULLUP+0x32>
 5a0:	3e c0       	rjmp	.+124    	; 0x61e <DIO_vconnectInternalPULLUP+0xae>
 5a2:	84 36       	cpi	r24, 0x64	; 100
 5a4:	09 f0       	breq	.+2      	; 0x5a8 <DIO_vconnectInternalPULLUP+0x38>
 5a6:	74 c0       	rjmp	.+232    	; 0x690 <DIO_vconnectInternalPULLUP+0x120>
 5a8:	57 c0       	rjmp	.+174    	; 0x658 <DIO_vconnectInternalPULLUP+0xe8>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
			if (connect_value==1)
 5aa:	41 30       	cpi	r20, 0x01	; 1
 5ac:	69 f4       	brne	.+26     	; 0x5c8 <DIO_vconnectInternalPULLUP+0x58>
			{
				SET_BIT(PORTA,pinnumber);//If connect_value equals one connect the internal pull up for the given pinnumber
 5ae:	2b b3       	in	r18, 0x1b	; 27
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	ac 01       	movw	r20, r24
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_vconnectInternalPULLUP+0x4c>
 5b8:	44 0f       	add	r20, r20
 5ba:	55 1f       	adc	r21, r21
 5bc:	6a 95       	dec	r22
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_vconnectInternalPULLUP+0x48>
 5c0:	ba 01       	movw	r22, r20
 5c2:	62 2b       	or	r22, r18
 5c4:	6b bb       	out	0x1b, r22	; 27
 5c6:	08 95       	ret
			}	
			else
			{
				CLR_BIT(PORTA,pinnumber);
 5c8:	2b b3       	in	r18, 0x1b	; 27
 5ca:	81 e0       	ldi	r24, 0x01	; 1
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	ac 01       	movw	r20, r24
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_vconnectInternalPULLUP+0x66>
 5d2:	44 0f       	add	r20, r20
 5d4:	55 1f       	adc	r21, r21
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_vconnectInternalPULLUP+0x62>
 5da:	ba 01       	movw	r22, r20
 5dc:	60 95       	com	r22
 5de:	62 23       	and	r22, r18
 5e0:	6b bb       	out	0x1b, r22	; 27
 5e2:	08 95       	ret
			}
		break;
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
			if(connect_value==1)
 5e4:	41 30       	cpi	r20, 0x01	; 1
 5e6:	69 f4       	brne	.+26     	; 0x602 <DIO_vconnectInternalPULLUP+0x92>
			{
				SET_BIT(PORTB,pinnumber);//If connect_value equals one connect the internal pull up for the given pinnumber
 5e8:	28 b3       	in	r18, 0x18	; 24
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	ac 01       	movw	r20, r24
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_vconnectInternalPULLUP+0x86>
 5f2:	44 0f       	add	r20, r20
 5f4:	55 1f       	adc	r21, r21
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_vconnectInternalPULLUP+0x82>
 5fa:	ba 01       	movw	r22, r20
 5fc:	62 2b       	or	r22, r18
 5fe:	68 bb       	out	0x18, r22	; 24
 600:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTB,pinnumber);	
 602:	28 b3       	in	r18, 0x18	; 24
 604:	81 e0       	ldi	r24, 0x01	; 1
 606:	90 e0       	ldi	r25, 0x00	; 0
 608:	ac 01       	movw	r20, r24
 60a:	02 c0       	rjmp	.+4      	; 0x610 <DIO_vconnectInternalPULLUP+0xa0>
 60c:	44 0f       	add	r20, r20
 60e:	55 1f       	adc	r21, r21
 610:	6a 95       	dec	r22
 612:	e2 f7       	brpl	.-8      	; 0x60c <DIO_vconnectInternalPULLUP+0x9c>
 614:	ba 01       	movw	r22, r20
 616:	60 95       	com	r22
 618:	62 23       	and	r22, r18
 61a:	68 bb       	out	0x18, r22	; 24
 61c:	08 95       	ret
			}
		break;
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
			if(connect_value==1)
 61e:	41 30       	cpi	r20, 0x01	; 1
 620:	69 f4       	brne	.+26     	; 0x63c <DIO_vconnectInternalPULLUP+0xcc>
			{
				SET_BIT(PORTC,pinnumber);//If connect_value equals one connect the internal pull up for the given pinnumber
 622:	25 b3       	in	r18, 0x15	; 21
 624:	81 e0       	ldi	r24, 0x01	; 1
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	ac 01       	movw	r20, r24
 62a:	02 c0       	rjmp	.+4      	; 0x630 <DIO_vconnectInternalPULLUP+0xc0>
 62c:	44 0f       	add	r20, r20
 62e:	55 1f       	adc	r21, r21
 630:	6a 95       	dec	r22
 632:	e2 f7       	brpl	.-8      	; 0x62c <DIO_vconnectInternalPULLUP+0xbc>
 634:	ba 01       	movw	r22, r20
 636:	62 2b       	or	r22, r18
 638:	65 bb       	out	0x15, r22	; 21
 63a:	08 95       	ret
			}
			else
			{
				CLR_BIT(PORTC,pinnumber);
 63c:	25 b3       	in	r18, 0x15	; 21
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	ac 01       	movw	r20, r24
 644:	02 c0       	rjmp	.+4      	; 0x64a <DIO_vconnectInternalPULLUP+0xda>
 646:	44 0f       	add	r20, r20
 648:	55 1f       	adc	r21, r21
 64a:	6a 95       	dec	r22
 64c:	e2 f7       	brpl	.-8      	; 0x646 <DIO_vconnectInternalPULLUP+0xd6>
 64e:	ba 01       	movw	r22, r20
 650:	60 95       	com	r22
 652:	62 23       	and	r22, r18
 654:	65 bb       	out	0x15, r22	; 21
 656:	08 95       	ret
			}
		break;
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
			if(connect_value==1)
 658:	41 30       	cpi	r20, 0x01	; 1
 65a:	69 f4       	brne	.+26     	; 0x676 <DIO_vconnectInternalPULLUP+0x106>
			{
				SET_BIT(PORTD,pinnumber);//If connect_value equals one connect the internal pull up for the given pinnumber
 65c:	22 b3       	in	r18, 0x12	; 18
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	ac 01       	movw	r20, r24
 664:	02 c0       	rjmp	.+4      	; 0x66a <DIO_vconnectInternalPULLUP+0xfa>
 666:	44 0f       	add	r20, r20
 668:	55 1f       	adc	r21, r21
 66a:	6a 95       	dec	r22
 66c:	e2 f7       	brpl	.-8      	; 0x666 <DIO_vconnectInternalPULLUP+0xf6>
 66e:	ba 01       	movw	r22, r20
 670:	62 2b       	or	r22, r18
 672:	62 bb       	out	0x12, r22	; 18
 674:	08 95       	ret
			}
			else 
			{
				CLR_BIT(PORTD,pinnumber);
 676:	22 b3       	in	r18, 0x12	; 18
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	ac 01       	movw	r20, r24
 67e:	02 c0       	rjmp	.+4      	; 0x684 <DIO_vconnectInternalPULLUP+0x114>
 680:	44 0f       	add	r20, r20
 682:	55 1f       	adc	r21, r21
 684:	6a 95       	dec	r22
 686:	e2 f7       	brpl	.-8      	; 0x680 <DIO_vconnectInternalPULLUP+0x110>
 688:	ba 01       	movw	r22, r20
 68a:	60 95       	com	r22
 68c:	62 23       	and	r22, r18
 68e:	62 bb       	out	0x12, r22	; 18
 690:	08 95       	ret

00000692 <DIO_vWriteLowNibble>:
}
void DIO_vWriteLowNibble(unsigned char portname, unsigned char number)//Puts the first four bits of a given number on least four bins of a given port
//number should be from 0 to 9
{
	//Difficult Solution..
	number = number & 0x0f;//if the user insert a number greater than 9, we will take only the first four bits
 692:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
 694:	84 34       	cpi	r24, 0x44	; 68
 696:	51 f1       	breq	.+84     	; 0x6ec <DIO_vWriteLowNibble+0x5a>
 698:	85 34       	cpi	r24, 0x45	; 69
 69a:	38 f4       	brcc	.+14     	; 0x6aa <DIO_vWriteLowNibble+0x18>
 69c:	82 34       	cpi	r24, 0x42	; 66
 69e:	c1 f0       	breq	.+48     	; 0x6d0 <DIO_vWriteLowNibble+0x3e>
 6a0:	83 34       	cpi	r24, 0x43	; 67
 6a2:	e8 f4       	brcc	.+58     	; 0x6de <DIO_vWriteLowNibble+0x4c>
 6a4:	81 34       	cpi	r24, 0x41	; 65
 6a6:	41 f5       	brne	.+80     	; 0x6f8 <DIO_vWriteLowNibble+0x66>
 6a8:	0c c0       	rjmp	.+24     	; 0x6c2 <DIO_vWriteLowNibble+0x30>
 6aa:	82 36       	cpi	r24, 0x62	; 98
 6ac:	89 f0       	breq	.+34     	; 0x6d0 <DIO_vWriteLowNibble+0x3e>
 6ae:	83 36       	cpi	r24, 0x63	; 99
 6b0:	18 f4       	brcc	.+6      	; 0x6b8 <DIO_vWriteLowNibble+0x26>
 6b2:	81 36       	cpi	r24, 0x61	; 97
 6b4:	09 f5       	brne	.+66     	; 0x6f8 <DIO_vWriteLowNibble+0x66>
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <DIO_vWriteLowNibble+0x30>
 6b8:	83 36       	cpi	r24, 0x63	; 99
 6ba:	89 f0       	breq	.+34     	; 0x6de <DIO_vWriteLowNibble+0x4c>
 6bc:	84 36       	cpi	r24, 0x64	; 100
 6be:	e1 f4       	brne	.+56     	; 0x6f8 <DIO_vWriteLowNibble+0x66>
 6c0:	15 c0       	rjmp	.+42     	; 0x6ec <DIO_vWriteLowNibble+0x5a>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
		PORTA = PORTA & 0xf0;
 6c2:	8b b3       	in	r24, 0x1b	; 27
 6c4:	80 7f       	andi	r24, 0xF0	; 240
 6c6:	8b bb       	out	0x1b, r24	; 27
		PORTA = PORTA | number;
 6c8:	8b b3       	in	r24, 0x1b	; 27
 6ca:	68 2b       	or	r22, r24
 6cc:	6b bb       	out	0x1b, r22	; 27
		break;
 6ce:	08 95       	ret
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
		PORTB = PORTB & 0xf0;
 6d0:	88 b3       	in	r24, 0x18	; 24
 6d2:	80 7f       	andi	r24, 0xF0	; 240
 6d4:	88 bb       	out	0x18, r24	; 24
		PORTB = PORTB | number;
 6d6:	88 b3       	in	r24, 0x18	; 24
 6d8:	68 2b       	or	r22, r24
 6da:	68 bb       	out	0x18, r22	; 24
		break;
 6dc:	08 95       	ret
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
		PORTC = PORTC & 0xf0;
 6de:	85 b3       	in	r24, 0x15	; 21
 6e0:	80 7f       	andi	r24, 0xF0	; 240
 6e2:	85 bb       	out	0x15, r24	; 21
		PORTC = PORTC | number;
 6e4:	85 b3       	in	r24, 0x15	; 21
 6e6:	68 2b       	or	r22, r24
 6e8:	65 bb       	out	0x15, r22	; 21
		break;
 6ea:	08 95       	ret
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
		PORTD = PORTD & 0xf0;
 6ec:	82 b3       	in	r24, 0x12	; 18
 6ee:	80 7f       	andi	r24, 0xF0	; 240
 6f0:	82 bb       	out	0x12, r24	; 18
		PORTD = PORTD | number;
 6f2:	82 b3       	in	r24, 0x12	; 18
 6f4:	68 2b       	or	r22, r24
 6f6:	62 bb       	out	0x12, r22	; 18
 6f8:	08 95       	ret

000006fa <DIO_vWriteHighNibble>:
}
void DIO_vWriteHighNibble(unsigned char portname, unsigned char number)//Puts the first four bits of a given number on most four bins of a given port
//number should be from 0 to 9
{
	//Difficult Solution..
	number = number<<4;//if the user insert a number greater than 9, we will take only the first four bits
 6fa:	62 95       	swap	r22
 6fc:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 6fe:	84 34       	cpi	r24, 0x44	; 68
 700:	51 f1       	breq	.+84     	; 0x756 <DIO_vWriteHighNibble+0x5c>
 702:	85 34       	cpi	r24, 0x45	; 69
 704:	38 f4       	brcc	.+14     	; 0x714 <DIO_vWriteHighNibble+0x1a>
 706:	82 34       	cpi	r24, 0x42	; 66
 708:	c1 f0       	breq	.+48     	; 0x73a <DIO_vWriteHighNibble+0x40>
 70a:	83 34       	cpi	r24, 0x43	; 67
 70c:	e8 f4       	brcc	.+58     	; 0x748 <DIO_vWriteHighNibble+0x4e>
 70e:	81 34       	cpi	r24, 0x41	; 65
 710:	41 f5       	brne	.+80     	; 0x762 <DIO_vWriteHighNibble+0x68>
 712:	0c c0       	rjmp	.+24     	; 0x72c <DIO_vWriteHighNibble+0x32>
 714:	82 36       	cpi	r24, 0x62	; 98
 716:	89 f0       	breq	.+34     	; 0x73a <DIO_vWriteHighNibble+0x40>
 718:	83 36       	cpi	r24, 0x63	; 99
 71a:	18 f4       	brcc	.+6      	; 0x722 <DIO_vWriteHighNibble+0x28>
 71c:	81 36       	cpi	r24, 0x61	; 97
 71e:	09 f5       	brne	.+66     	; 0x762 <DIO_vWriteHighNibble+0x68>
 720:	05 c0       	rjmp	.+10     	; 0x72c <DIO_vWriteHighNibble+0x32>
 722:	83 36       	cpi	r24, 0x63	; 99
 724:	89 f0       	breq	.+34     	; 0x748 <DIO_vWriteHighNibble+0x4e>
 726:	84 36       	cpi	r24, 0x64	; 100
 728:	e1 f4       	brne	.+56     	; 0x762 <DIO_vWriteHighNibble+0x68>
 72a:	15 c0       	rjmp	.+42     	; 0x756 <DIO_vWriteHighNibble+0x5c>
	{
		case 'A':
		// Case the user inputs a as a small litter not the capital one
		case 'a':
		PORTA = PORTA & 0x0f;
 72c:	8b b3       	in	r24, 0x1b	; 27
 72e:	8f 70       	andi	r24, 0x0F	; 15
 730:	8b bb       	out	0x1b, r24	; 27
		PORTA = PORTA | number;
 732:	8b b3       	in	r24, 0x1b	; 27
 734:	68 2b       	or	r22, r24
 736:	6b bb       	out	0x1b, r22	; 27
		break;
 738:	08 95       	ret
		case 'B':
		// Case the user inputs b as a small litter not the capital one
		case 'b':
		PORTB = PORTB & 0x0f;
 73a:	88 b3       	in	r24, 0x18	; 24
 73c:	8f 70       	andi	r24, 0x0F	; 15
 73e:	88 bb       	out	0x18, r24	; 24
		PORTB = PORTB | number;
 740:	88 b3       	in	r24, 0x18	; 24
 742:	68 2b       	or	r22, r24
 744:	68 bb       	out	0x18, r22	; 24
		break;
 746:	08 95       	ret
		case 'C':
		// Case the user inputs c as a small litter not the capital one
		case 'c':
		PORTC = PORTC & 0x0f;
 748:	85 b3       	in	r24, 0x15	; 21
 74a:	8f 70       	andi	r24, 0x0F	; 15
 74c:	85 bb       	out	0x15, r24	; 21
		PORTC = PORTC | number;
 74e:	85 b3       	in	r24, 0x15	; 21
 750:	68 2b       	or	r22, r24
 752:	65 bb       	out	0x15, r22	; 21
		break;
 754:	08 95       	ret
		case 'D':
		// Case the user inputs d as a small litter not the capital one
		case 'd':
		PORTD = PORTD & 0x0f;
 756:	82 b3       	in	r24, 0x12	; 18
 758:	8f 70       	andi	r24, 0x0F	; 15
 75a:	82 bb       	out	0x12, r24	; 18
		PORTD = PORTD | number;
 75c:	82 b3       	in	r24, 0x12	; 18
 75e:	68 2b       	or	r22, r24
 760:	62 bb       	out	0x12, r22	; 18
 762:	08 95       	ret

00000764 <LCD_vsend_Falling_Edge>:
		_delay_ms(1);
	#endif
}
void LCD_vsend_Falling_Edge(void)//It is responsible for Sending pulses to enable
{
	DIO_vwritePIN(EN_port,EN,1);
 764:	82 e4       	ldi	r24, 0x42	; 66
 766:	60 e0       	ldi	r22, 0x00	; 0
 768:	41 e0       	ldi	r20, 0x01	; 1
 76a:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vwritePIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 76e:	8f e9       	ldi	r24, 0x9F	; 159
 770:	9f e0       	ldi	r25, 0x0F	; 15
 772:	01 97       	sbiw	r24, 0x01	; 1
 774:	f1 f7       	brne	.-4      	; 0x772 <LCD_vsend_Falling_Edge+0xe>
 776:	00 c0       	rjmp	.+0      	; 0x778 <LCD_vsend_Falling_Edge+0x14>
 778:	00 00       	nop
	_delay_ms(2);
	DIO_vwritePIN(EN_port,EN,0);
 77a:	82 e4       	ldi	r24, 0x42	; 66
 77c:	60 e0       	ldi	r22, 0x00	; 0
 77e:	40 e0       	ldi	r20, 0x00	; 0
 780:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vwritePIN>
 784:	8f e9       	ldi	r24, 0x9F	; 159
 786:	9f e0       	ldi	r25, 0x0F	; 15
 788:	01 97       	sbiw	r24, 0x01	; 1
 78a:	f1 f7       	brne	.-4      	; 0x788 <LCD_vsend_Falling_Edge+0x24>
 78c:	00 c0       	rjmp	.+0      	; 0x78e <LCD_vsend_Falling_Edge+0x2a>
 78e:	00 00       	nop
	_delay_ms(2);
}
 790:	08 95       	ret

00000792 <LCD_vSend_Char>:
void LCD_vSend_Char(unsigned char data)//Send a character to be written on the LCD
{
 792:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	
	DIO_vwritePORT(Data_port,data);
 794:	84 e4       	ldi	r24, 0x44	; 68
 796:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_vwritePORT>
	DIO_vwritePIN(RS_port,RS,1);
 79a:	82 e4       	ldi	r24, 0x42	; 66
 79c:	61 e0       	ldi	r22, 0x01	; 1
 79e:	41 e0       	ldi	r20, 0x01	; 1
 7a0:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vwritePIN>
	LCD_vsend_Falling_Edge();
 7a4:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_vsend_Falling_Edge>
	DIO_vWriteLowNibble(Data_port,data);
	DIO_vwritePIN(RS_port,RS,1);
	LCD_vsend_Falling_Edge();
	
	#endif
}
 7a8:	08 95       	ret

000007aa <LCD_vSend_Cmd>:
void LCD_vSend_Cmd(unsigned char cmd)//Send a given command to LCD
{
 7aa:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	
	DIO_vwritePORT(Data_port,cmd);
 7ac:	84 e4       	ldi	r24, 0x44	; 68
 7ae:	0e 94 53 02 	call	0x4a6	; 0x4a6 <DIO_vwritePORT>
	DIO_vwritePIN(RS_port,RS,0);
 7b2:	82 e4       	ldi	r24, 0x42	; 66
 7b4:	61 e0       	ldi	r22, 0x01	; 1
 7b6:	40 e0       	ldi	r20, 0x00	; 0
 7b8:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vwritePIN>
	LCD_vsend_Falling_Edge();
 7bc:	0e 94 b2 03 	call	0x764	; 0x764 <LCD_vsend_Falling_Edge>
	DIO_vWriteLowNibble(Data_port,cmd);
	DIO_vwritePIN(RS_port,RS,0);
	LCD_vsend_Falling_Edge();
	
	#endif
}
 7c0:	08 95       	ret

000007c2 <LCD_vInit>:
 7c2:	8f ef       	ldi	r24, 0xFF	; 255
 7c4:	91 ee       	ldi	r25, 0xE1	; 225
 7c6:	a4 e0       	ldi	r26, 0x04	; 4
 7c8:	81 50       	subi	r24, 0x01	; 1
 7ca:	90 40       	sbci	r25, 0x00	; 0
 7cc:	a0 40       	sbci	r26, 0x00	; 0
 7ce:	e1 f7       	brne	.-8      	; 0x7c8 <LCD_vInit+0x6>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <LCD_vInit+0x10>
 7d2:	00 00       	nop

void LCD_vInit(void)//Initialize LCD
{
	_delay_ms(200);//Delay to ensure that LCD becomes ON
	#if defined eight_bits_mode
		DIO_vsetPORTDIR(Data_port,0xff);//Set all pins of a given port as output
 7d4:	84 e4       	ldi	r24, 0x44	; 68
 7d6:	6f ef       	ldi	r22, 0xFF	; 255
 7d8:	0e 94 34 02 	call	0x468	; 0x468 <DIO_vsetPORTDIR>
		DIO_vsetPINDIR(EN_port,EN,1);//set a given pin in MC which connected to LCD's enable as output
 7dc:	82 e4       	ldi	r24, 0x42	; 66
 7de:	60 e0       	ldi	r22, 0x00	; 0
 7e0:	41 e0       	ldi	r20, 0x01	; 1
 7e2:	0e 94 5d 00 	call	0xba	; 0xba <DIO_vsetPINDIR>
		DIO_vsetPINDIR(RS_port,RS,1);//set a given pin in MC which connected to LCD's Read Register as output 
 7e6:	82 e4       	ldi	r24, 0x42	; 66
 7e8:	61 e0       	ldi	r22, 0x01	; 1
 7ea:	41 e0       	ldi	r20, 0x01	; 1
 7ec:	0e 94 5d 00 	call	0xba	; 0xba <DIO_vsetPINDIR>
		DIO_vsetPINDIR(RW_port,RW,1);//set a given pin in MC which connected to LCD's Read/Write as output
 7f0:	82 e4       	ldi	r24, 0x42	; 66
 7f2:	62 e0       	ldi	r22, 0x02	; 2
 7f4:	41 e0       	ldi	r20, 0x01	; 1
 7f6:	0e 94 5d 00 	call	0xba	; 0xba <DIO_vsetPINDIR>
		#if defined LCD_Write
			DIO_vwritePIN(RW_port,RW,0);//That means, I want LCD to write
 7fa:	82 e4       	ldi	r24, 0x42	; 66
 7fc:	62 e0       	ldi	r22, 0x02	; 2
 7fe:	40 e0       	ldi	r20, 0x00	; 0
 800:	0e 94 ee 00 	call	0x1dc	; 0x1dc <DIO_vwritePIN>
		#elif defined LCD_Read
			DIO_vwritePIN(RW_port,RW,1);//That means, I want LCD to Read
		#endif
		LCD_vSend_Cmd(EIGHT_BITS);//8 bits mode
 804:	88 e3       	ldi	r24, 0x38	; 56
 806:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_vSend_Cmd>
 80a:	af ec       	ldi	r26, 0xCF	; 207
 80c:	b7 e0       	ldi	r27, 0x07	; 7
 80e:	11 97       	sbiw	r26, 0x01	; 1
 810:	f1 f7       	brne	.-4      	; 0x80e <LCD_vInit+0x4c>
 812:	00 c0       	rjmp	.+0      	; 0x814 <LCD_vInit+0x52>
 814:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_Cmd(CURSOR_ON_DISPLAY_ON);
 816:	8c e0       	ldi	r24, 0x0C	; 12
 818:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_vSend_Cmd>
 81c:	8f ec       	ldi	r24, 0xCF	; 207
 81e:	97 e0       	ldi	r25, 0x07	; 7
 820:	01 97       	sbiw	r24, 0x01	; 1
 822:	f1 f7       	brne	.-4      	; 0x820 <LCD_vInit+0x5e>
 824:	00 c0       	rjmp	.+0      	; 0x826 <LCD_vInit+0x64>
 826:	00 00       	nop
		_delay_ms(1);
		LCD_vSend_Cmd(CLR_SCREEN);
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_vSend_Cmd>
 82e:	af e1       	ldi	r26, 0x1F	; 31
 830:	be e4       	ldi	r27, 0x4E	; 78
 832:	11 97       	sbiw	r26, 0x01	; 1
 834:	f1 f7       	brne	.-4      	; 0x832 <LCD_vInit+0x70>
 836:	00 c0       	rjmp	.+0      	; 0x838 <LCD_vInit+0x76>
 838:	00 00       	nop
		_delay_ms(10);
		LCD_vSend_Cmd(ENTRY_MODE);
 83a:	86 e0       	ldi	r24, 0x06	; 6
 83c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_vSend_Cmd>
 840:	8f ec       	ldi	r24, 0xCF	; 207
 842:	97 e0       	ldi	r25, 0x07	; 7
 844:	01 97       	sbiw	r24, 0x01	; 1
 846:	f1 f7       	brne	.-4      	; 0x844 <LCD_vInit+0x82>
 848:	00 c0       	rjmp	.+0      	; 0x84a <LCD_vInit+0x88>
 84a:	00 00       	nop
		LCD_vSend_Cmd(CLR_SCREEN);
		_delay_ms(10);
		LCD_vSend_Cmd(ENTRY_MODE);
		_delay_ms(1);
	#endif
}
 84c:	08 95       	ret

0000084e <LCD_vClearScreen>:
	
	#endif
}
void LCD_vClearScreen()
{
	LCD_vSend_Cmd(CLR_SCREEN);
 84e:	81 e0       	ldi	r24, 0x01	; 1
 850:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_vSend_Cmd>
 854:	8f e1       	ldi	r24, 0x1F	; 31
 856:	9e e4       	ldi	r25, 0x4E	; 78
 858:	01 97       	sbiw	r24, 0x01	; 1
 85a:	f1 f7       	brne	.-4      	; 0x858 <LCD_vClearScreen+0xa>
 85c:	00 c0       	rjmp	.+0      	; 0x85e <LCD_vClearScreen+0x10>
 85e:	00 00       	nop
	_delay_ms(10);
}
 860:	08 95       	ret

00000862 <LCD_vSend_String>:
void LCD_vSend_String(char *data)//Send string to be written on the LCD
{
 862:	cf 93       	push	r28
 864:	df 93       	push	r29
 866:	ec 01       	movw	r28, r24
	while( (*data) != '\0')
 868:	88 81       	ld	r24, Y
 86a:	88 23       	and	r24, r24
 86c:	31 f0       	breq	.+12     	; 0x87a <LCD_vSend_String+0x18>
void LCD_vClearScreen()
{
	LCD_vSend_Cmd(CLR_SCREEN);
	_delay_ms(10);
}
void LCD_vSend_String(char *data)//Send string to be written on the LCD
 86e:	21 96       	adiw	r28, 0x01	; 1
{
	while( (*data) != '\0')
	{
		LCD_vSend_Char(*data);
 870:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_Char>
	LCD_vSend_Cmd(CLR_SCREEN);
	_delay_ms(10);
}
void LCD_vSend_String(char *data)//Send string to be written on the LCD
{
	while( (*data) != '\0')
 874:	89 91       	ld	r24, Y+
 876:	88 23       	and	r24, r24
 878:	d9 f7       	brne	.-10     	; 0x870 <LCD_vSend_String+0xe>
	{
		LCD_vSend_Char(*data);
		data++;
	}
}
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	08 95       	ret

00000880 <LCD_vMoveCursor>:
void LCD_vMoveCursor(unsigned char row,unsigned char coloumn)//Move cursor to a given location (according to a given row and a given coloumn)
{
	char data;
	if(row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
 880:	28 2f       	mov	r18, r24
 882:	21 50       	subi	r18, 0x01	; 1
 884:	22 30       	cpi	r18, 0x02	; 2
 886:	70 f4       	brcc	.+28     	; 0x8a4 <LCD_vMoveCursor+0x24>
 888:	61 31       	cpi	r22, 0x11	; 17
 88a:	70 f4       	brcc	.+28     	; 0x8a8 <LCD_vMoveCursor+0x28>
 88c:	66 23       	and	r22, r22
 88e:	71 f0       	breq	.+28     	; 0x8ac <LCD_vMoveCursor+0x2c>
	{
		data = 0x80;
	}
	else if(row == 1)
 890:	81 30       	cpi	r24, 0x01	; 1
 892:	19 f4       	brne	.+6      	; 0x89a <LCD_vMoveCursor+0x1a>
	{
		data = 0x80+coloumn-1;
 894:	96 2f       	mov	r25, r22
 896:	91 58       	subi	r25, 0x81	; 129
 898:	0a c0       	rjmp	.+20     	; 0x8ae <LCD_vMoveCursor+0x2e>
	}
	else if(row == 2)
 89a:	82 30       	cpi	r24, 0x02	; 2
 89c:	41 f4       	brne	.+16     	; 0x8ae <LCD_vMoveCursor+0x2e>
	{
		data = 0xc0+coloumn-1;
 89e:	96 2f       	mov	r25, r22
 8a0:	91 54       	subi	r25, 0x41	; 65
 8a2:	05 c0       	rjmp	.+10     	; 0x8ae <LCD_vMoveCursor+0x2e>
void LCD_vMoveCursor(unsigned char row,unsigned char coloumn)//Move cursor to a given location (according to a given row and a given coloumn)
{
	char data;
	if(row > 2 || row < 1 || coloumn > 16 || coloumn < 1)
	{
		data = 0x80;
 8a4:	90 e8       	ldi	r25, 0x80	; 128
 8a6:	03 c0       	rjmp	.+6      	; 0x8ae <LCD_vMoveCursor+0x2e>
 8a8:	90 e8       	ldi	r25, 0x80	; 128
 8aa:	01 c0       	rjmp	.+2      	; 0x8ae <LCD_vMoveCursor+0x2e>
 8ac:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if(row == 2)
	{
		data = 0xc0+coloumn-1;
	}
	LCD_vSend_Cmd(data);
 8ae:	89 2f       	mov	r24, r25
 8b0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <LCD_vSend_Cmd>
 8b4:	8f ec       	ldi	r24, 0xCF	; 207
 8b6:	97 e0       	ldi	r25, 0x07	; 7
 8b8:	01 97       	sbiw	r24, 0x01	; 1
 8ba:	f1 f7       	brne	.-4      	; 0x8b8 <LCD_vMoveCursor+0x38>
 8bc:	00 c0       	rjmp	.+0      	; 0x8be <LCD_vMoveCursor+0x3e>
 8be:	00 00       	nop
	_delay_ms(1);
}
 8c0:	08 95       	ret

000008c2 <main>:
#include "LCD.h"
char read_val;
unsigned short temperatue;
int main(void)
{
	LCD_vInit();
 8c2:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <LCD_vInit>
	ADC_vInit();
 8c6:	0e 94 49 00 	call	0x92	; 0x92 <ADC_vInit>
	LCD_vSend_String("temperature=");
 8ca:	80 e6       	ldi	r24, 0x60	; 96
 8cc:	90 e0       	ldi	r25, 0x00	; 0
 8ce:	0e 94 31 04 	call	0x862	; 0x862 <LCD_vSend_String>

		temperatue=(ADC_u16Read()*0.25);
		if(temperatue<10)
		{
			LCD_vMoveCursor(1,13);
			LCD_vSend_Char((temperatue%10)+48);
 8d2:	ca e0       	ldi	r28, 0x0A	; 10
 8d4:	d0 e0       	ldi	r29, 0x00	; 0
	ADC_vInit();
	LCD_vSend_String("temperature=");
	while(1)
	{

		temperatue=(ADC_u16Read()*0.25);
 8d6:	0e 94 51 00 	call	0xa2	; 0xa2 <ADC_u16Read>
 8da:	bc 01       	movw	r22, r24
 8dc:	80 e0       	ldi	r24, 0x00	; 0
 8de:	90 e0       	ldi	r25, 0x00	; 0
 8e0:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__floatunsisf>
 8e4:	20 e0       	ldi	r18, 0x00	; 0
 8e6:	30 e0       	ldi	r19, 0x00	; 0
 8e8:	40 e8       	ldi	r20, 0x80	; 128
 8ea:	5e e3       	ldi	r21, 0x3E	; 62
 8ec:	0e 94 50 05 	call	0xaa0	; 0xaa0 <__mulsf3>
 8f0:	0e 94 be 04 	call	0x97c	; 0x97c <__fixunssfsi>
 8f4:	ab 01       	movw	r20, r22
 8f6:	bc 01       	movw	r22, r24
 8f8:	50 93 6f 00 	sts	0x006F, r21
 8fc:	40 93 6e 00 	sts	0x006E, r20
		if(temperatue<10)
 900:	4a 30       	cpi	r20, 0x0A	; 10
 902:	51 05       	cpc	r21, r1
 904:	c0 f4       	brcc	.+48     	; 0x936 <main+0x74>
		{
			LCD_vMoveCursor(1,13);
 906:	81 e0       	ldi	r24, 0x01	; 1
 908:	6d e0       	ldi	r22, 0x0D	; 13
 90a:	0e 94 40 04 	call	0x880	; 0x880 <LCD_vMoveCursor>
			LCD_vSend_Char((temperatue%10)+48);
 90e:	80 91 6e 00 	lds	r24, 0x006E
 912:	90 91 6f 00 	lds	r25, 0x006F
 916:	be 01       	movw	r22, r28
 918:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__udivmodhi4>
 91c:	80 5d       	subi	r24, 0xD0	; 208
 91e:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_Char>
			LCD_vSend_Char(0xDF);
 922:	8f ed       	ldi	r24, 0xDF	; 223
 924:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_Char>
			LCD_vSend_Char(0x43);
 928:	83 e4       	ldi	r24, 0x43	; 67
 92a:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_Char>
			LCD_vSend_Char(0x20);
 92e:	80 e2       	ldi	r24, 0x20	; 32
 930:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_Char>
 934:	d0 cf       	rjmp	.-96     	; 0x8d6 <main+0x14>
		}
		else if( temperatue<100)
 936:	44 36       	cpi	r20, 0x64	; 100
 938:	51 05       	cpc	r21, r1
 93a:	68 f6       	brcc	.-102    	; 0x8d6 <main+0x14>
		{
			LCD_vMoveCursor(1,13);
 93c:	81 e0       	ldi	r24, 0x01	; 1
 93e:	6d e0       	ldi	r22, 0x0D	; 13
 940:	0e 94 40 04 	call	0x880	; 0x880 <LCD_vMoveCursor>
			LCD_vSend_Char((temperatue/10)+48);
 944:	80 91 6e 00 	lds	r24, 0x006E
 948:	90 91 6f 00 	lds	r25, 0x006F
 94c:	be 01       	movw	r22, r28
 94e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__udivmodhi4>
 952:	86 2f       	mov	r24, r22
 954:	80 5d       	subi	r24, 0xD0	; 208
 956:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_Char>
			LCD_vSend_Char((temperatue%10)+48);
 95a:	80 91 6e 00 	lds	r24, 0x006E
 95e:	90 91 6f 00 	lds	r25, 0x006F
 962:	be 01       	movw	r22, r28
 964:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__udivmodhi4>
 968:	80 5d       	subi	r24, 0xD0	; 208
 96a:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_Char>
			LCD_vSend_Char(0XDF);
 96e:	8f ed       	ldi	r24, 0xDF	; 223
 970:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_Char>
			LCD_vSend_Char(0X43);
 974:	83 e4       	ldi	r24, 0x43	; 67
 976:	0e 94 c9 03 	call	0x792	; 0x792 <LCD_vSend_Char>
 97a:	ad cf       	rjmp	.-166    	; 0x8d6 <main+0x14>

0000097c <__fixunssfsi>:
 97c:	70 d0       	rcall	.+224    	; 0xa5e <__fp_splitA>
 97e:	88 f0       	brcs	.+34     	; 0x9a2 <__fixunssfsi+0x26>
 980:	9f 57       	subi	r25, 0x7F	; 127
 982:	90 f0       	brcs	.+36     	; 0x9a8 <__fixunssfsi+0x2c>
 984:	b9 2f       	mov	r27, r25
 986:	99 27       	eor	r25, r25
 988:	b7 51       	subi	r27, 0x17	; 23
 98a:	a0 f0       	brcs	.+40     	; 0x9b4 <__fixunssfsi+0x38>
 98c:	d1 f0       	breq	.+52     	; 0x9c2 <__fixunssfsi+0x46>
 98e:	66 0f       	add	r22, r22
 990:	77 1f       	adc	r23, r23
 992:	88 1f       	adc	r24, r24
 994:	99 1f       	adc	r25, r25
 996:	1a f0       	brmi	.+6      	; 0x99e <__fixunssfsi+0x22>
 998:	ba 95       	dec	r27
 99a:	c9 f7       	brne	.-14     	; 0x98e <__fixunssfsi+0x12>
 99c:	12 c0       	rjmp	.+36     	; 0x9c2 <__fixunssfsi+0x46>
 99e:	b1 30       	cpi	r27, 0x01	; 1
 9a0:	81 f0       	breq	.+32     	; 0x9c2 <__fixunssfsi+0x46>
 9a2:	77 d0       	rcall	.+238    	; 0xa92 <__fp_zero>
 9a4:	b1 e0       	ldi	r27, 0x01	; 1
 9a6:	08 95       	ret
 9a8:	74 c0       	rjmp	.+232    	; 0xa92 <__fp_zero>
 9aa:	67 2f       	mov	r22, r23
 9ac:	78 2f       	mov	r23, r24
 9ae:	88 27       	eor	r24, r24
 9b0:	b8 5f       	subi	r27, 0xF8	; 248
 9b2:	39 f0       	breq	.+14     	; 0x9c2 <__fixunssfsi+0x46>
 9b4:	b9 3f       	cpi	r27, 0xF9	; 249
 9b6:	cc f3       	brlt	.-14     	; 0x9aa <__fixunssfsi+0x2e>
 9b8:	86 95       	lsr	r24
 9ba:	77 95       	ror	r23
 9bc:	67 95       	ror	r22
 9be:	b3 95       	inc	r27
 9c0:	d9 f7       	brne	.-10     	; 0x9b8 <__fixunssfsi+0x3c>
 9c2:	3e f4       	brtc	.+14     	; 0x9d2 <__fixunssfsi+0x56>
 9c4:	90 95       	com	r25
 9c6:	80 95       	com	r24
 9c8:	70 95       	com	r23
 9ca:	61 95       	neg	r22
 9cc:	7f 4f       	sbci	r23, 0xFF	; 255
 9ce:	8f 4f       	sbci	r24, 0xFF	; 255
 9d0:	9f 4f       	sbci	r25, 0xFF	; 255
 9d2:	08 95       	ret

000009d4 <__floatunsisf>:
 9d4:	e8 94       	clt
 9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__floatsisf+0x12>

000009d8 <__floatsisf>:
 9d8:	97 fb       	bst	r25, 7
 9da:	3e f4       	brtc	.+14     	; 0x9ea <__floatsisf+0x12>
 9dc:	90 95       	com	r25
 9de:	80 95       	com	r24
 9e0:	70 95       	com	r23
 9e2:	61 95       	neg	r22
 9e4:	7f 4f       	sbci	r23, 0xFF	; 255
 9e6:	8f 4f       	sbci	r24, 0xFF	; 255
 9e8:	9f 4f       	sbci	r25, 0xFF	; 255
 9ea:	99 23       	and	r25, r25
 9ec:	a9 f0       	breq	.+42     	; 0xa18 <__floatsisf+0x40>
 9ee:	f9 2f       	mov	r31, r25
 9f0:	96 e9       	ldi	r25, 0x96	; 150
 9f2:	bb 27       	eor	r27, r27
 9f4:	93 95       	inc	r25
 9f6:	f6 95       	lsr	r31
 9f8:	87 95       	ror	r24
 9fa:	77 95       	ror	r23
 9fc:	67 95       	ror	r22
 9fe:	b7 95       	ror	r27
 a00:	f1 11       	cpse	r31, r1
 a02:	f8 cf       	rjmp	.-16     	; 0x9f4 <__floatsisf+0x1c>
 a04:	fa f4       	brpl	.+62     	; 0xa44 <__floatsisf+0x6c>
 a06:	bb 0f       	add	r27, r27
 a08:	11 f4       	brne	.+4      	; 0xa0e <__floatsisf+0x36>
 a0a:	60 ff       	sbrs	r22, 0
 a0c:	1b c0       	rjmp	.+54     	; 0xa44 <__floatsisf+0x6c>
 a0e:	6f 5f       	subi	r22, 0xFF	; 255
 a10:	7f 4f       	sbci	r23, 0xFF	; 255
 a12:	8f 4f       	sbci	r24, 0xFF	; 255
 a14:	9f 4f       	sbci	r25, 0xFF	; 255
 a16:	16 c0       	rjmp	.+44     	; 0xa44 <__floatsisf+0x6c>
 a18:	88 23       	and	r24, r24
 a1a:	11 f0       	breq	.+4      	; 0xa20 <__floatsisf+0x48>
 a1c:	96 e9       	ldi	r25, 0x96	; 150
 a1e:	11 c0       	rjmp	.+34     	; 0xa42 <__floatsisf+0x6a>
 a20:	77 23       	and	r23, r23
 a22:	21 f0       	breq	.+8      	; 0xa2c <__floatsisf+0x54>
 a24:	9e e8       	ldi	r25, 0x8E	; 142
 a26:	87 2f       	mov	r24, r23
 a28:	76 2f       	mov	r23, r22
 a2a:	05 c0       	rjmp	.+10     	; 0xa36 <__floatsisf+0x5e>
 a2c:	66 23       	and	r22, r22
 a2e:	71 f0       	breq	.+28     	; 0xa4c <__floatsisf+0x74>
 a30:	96 e8       	ldi	r25, 0x86	; 134
 a32:	86 2f       	mov	r24, r22
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	2a f0       	brmi	.+10     	; 0xa44 <__floatsisf+0x6c>
 a3a:	9a 95       	dec	r25
 a3c:	66 0f       	add	r22, r22
 a3e:	77 1f       	adc	r23, r23
 a40:	88 1f       	adc	r24, r24
 a42:	da f7       	brpl	.-10     	; 0xa3a <__floatsisf+0x62>
 a44:	88 0f       	add	r24, r24
 a46:	96 95       	lsr	r25
 a48:	87 95       	ror	r24
 a4a:	97 f9       	bld	r25, 7
 a4c:	08 95       	ret

00000a4e <__fp_split3>:
 a4e:	57 fd       	sbrc	r21, 7
 a50:	90 58       	subi	r25, 0x80	; 128
 a52:	44 0f       	add	r20, r20
 a54:	55 1f       	adc	r21, r21
 a56:	59 f0       	breq	.+22     	; 0xa6e <__fp_splitA+0x10>
 a58:	5f 3f       	cpi	r21, 0xFF	; 255
 a5a:	71 f0       	breq	.+28     	; 0xa78 <__fp_splitA+0x1a>
 a5c:	47 95       	ror	r20

00000a5e <__fp_splitA>:
 a5e:	88 0f       	add	r24, r24
 a60:	97 fb       	bst	r25, 7
 a62:	99 1f       	adc	r25, r25
 a64:	61 f0       	breq	.+24     	; 0xa7e <__fp_splitA+0x20>
 a66:	9f 3f       	cpi	r25, 0xFF	; 255
 a68:	79 f0       	breq	.+30     	; 0xa88 <__fp_splitA+0x2a>
 a6a:	87 95       	ror	r24
 a6c:	08 95       	ret
 a6e:	12 16       	cp	r1, r18
 a70:	13 06       	cpc	r1, r19
 a72:	14 06       	cpc	r1, r20
 a74:	55 1f       	adc	r21, r21
 a76:	f2 cf       	rjmp	.-28     	; 0xa5c <__fp_split3+0xe>
 a78:	46 95       	lsr	r20
 a7a:	f1 df       	rcall	.-30     	; 0xa5e <__fp_splitA>
 a7c:	08 c0       	rjmp	.+16     	; 0xa8e <__fp_splitA+0x30>
 a7e:	16 16       	cp	r1, r22
 a80:	17 06       	cpc	r1, r23
 a82:	18 06       	cpc	r1, r24
 a84:	99 1f       	adc	r25, r25
 a86:	f1 cf       	rjmp	.-30     	; 0xa6a <__fp_splitA+0xc>
 a88:	86 95       	lsr	r24
 a8a:	71 05       	cpc	r23, r1
 a8c:	61 05       	cpc	r22, r1
 a8e:	08 94       	sec
 a90:	08 95       	ret

00000a92 <__fp_zero>:
 a92:	e8 94       	clt

00000a94 <__fp_szero>:
 a94:	bb 27       	eor	r27, r27
 a96:	66 27       	eor	r22, r22
 a98:	77 27       	eor	r23, r23
 a9a:	cb 01       	movw	r24, r22
 a9c:	97 f9       	bld	r25, 7
 a9e:	08 95       	ret

00000aa0 <__mulsf3>:
 aa0:	0b d0       	rcall	.+22     	; 0xab8 <__mulsf3x>
 aa2:	78 c0       	rjmp	.+240    	; 0xb94 <__fp_round>
 aa4:	69 d0       	rcall	.+210    	; 0xb78 <__fp_pscA>
 aa6:	28 f0       	brcs	.+10     	; 0xab2 <__mulsf3+0x12>
 aa8:	6e d0       	rcall	.+220    	; 0xb86 <__fp_pscB>
 aaa:	18 f0       	brcs	.+6      	; 0xab2 <__mulsf3+0x12>
 aac:	95 23       	and	r25, r21
 aae:	09 f0       	breq	.+2      	; 0xab2 <__mulsf3+0x12>
 ab0:	5a c0       	rjmp	.+180    	; 0xb66 <__fp_inf>
 ab2:	5f c0       	rjmp	.+190    	; 0xb72 <__fp_nan>
 ab4:	11 24       	eor	r1, r1
 ab6:	ee cf       	rjmp	.-36     	; 0xa94 <__fp_szero>

00000ab8 <__mulsf3x>:
 ab8:	ca df       	rcall	.-108    	; 0xa4e <__fp_split3>
 aba:	a0 f3       	brcs	.-24     	; 0xaa4 <__mulsf3+0x4>

00000abc <__mulsf3_pse>:
 abc:	95 9f       	mul	r25, r21
 abe:	d1 f3       	breq	.-12     	; 0xab4 <__mulsf3+0x14>
 ac0:	95 0f       	add	r25, r21
 ac2:	50 e0       	ldi	r21, 0x00	; 0
 ac4:	55 1f       	adc	r21, r21
 ac6:	62 9f       	mul	r22, r18
 ac8:	f0 01       	movw	r30, r0
 aca:	72 9f       	mul	r23, r18
 acc:	bb 27       	eor	r27, r27
 ace:	f0 0d       	add	r31, r0
 ad0:	b1 1d       	adc	r27, r1
 ad2:	63 9f       	mul	r22, r19
 ad4:	aa 27       	eor	r26, r26
 ad6:	f0 0d       	add	r31, r0
 ad8:	b1 1d       	adc	r27, r1
 ada:	aa 1f       	adc	r26, r26
 adc:	64 9f       	mul	r22, r20
 ade:	66 27       	eor	r22, r22
 ae0:	b0 0d       	add	r27, r0
 ae2:	a1 1d       	adc	r26, r1
 ae4:	66 1f       	adc	r22, r22
 ae6:	82 9f       	mul	r24, r18
 ae8:	22 27       	eor	r18, r18
 aea:	b0 0d       	add	r27, r0
 aec:	a1 1d       	adc	r26, r1
 aee:	62 1f       	adc	r22, r18
 af0:	73 9f       	mul	r23, r19
 af2:	b0 0d       	add	r27, r0
 af4:	a1 1d       	adc	r26, r1
 af6:	62 1f       	adc	r22, r18
 af8:	83 9f       	mul	r24, r19
 afa:	a0 0d       	add	r26, r0
 afc:	61 1d       	adc	r22, r1
 afe:	22 1f       	adc	r18, r18
 b00:	74 9f       	mul	r23, r20
 b02:	33 27       	eor	r19, r19
 b04:	a0 0d       	add	r26, r0
 b06:	61 1d       	adc	r22, r1
 b08:	23 1f       	adc	r18, r19
 b0a:	84 9f       	mul	r24, r20
 b0c:	60 0d       	add	r22, r0
 b0e:	21 1d       	adc	r18, r1
 b10:	82 2f       	mov	r24, r18
 b12:	76 2f       	mov	r23, r22
 b14:	6a 2f       	mov	r22, r26
 b16:	11 24       	eor	r1, r1
 b18:	9f 57       	subi	r25, 0x7F	; 127
 b1a:	50 40       	sbci	r21, 0x00	; 0
 b1c:	8a f0       	brmi	.+34     	; 0xb40 <__mulsf3_pse+0x84>
 b1e:	e1 f0       	breq	.+56     	; 0xb58 <__mulsf3_pse+0x9c>
 b20:	88 23       	and	r24, r24
 b22:	4a f0       	brmi	.+18     	; 0xb36 <__mulsf3_pse+0x7a>
 b24:	ee 0f       	add	r30, r30
 b26:	ff 1f       	adc	r31, r31
 b28:	bb 1f       	adc	r27, r27
 b2a:	66 1f       	adc	r22, r22
 b2c:	77 1f       	adc	r23, r23
 b2e:	88 1f       	adc	r24, r24
 b30:	91 50       	subi	r25, 0x01	; 1
 b32:	50 40       	sbci	r21, 0x00	; 0
 b34:	a9 f7       	brne	.-22     	; 0xb20 <__mulsf3_pse+0x64>
 b36:	9e 3f       	cpi	r25, 0xFE	; 254
 b38:	51 05       	cpc	r21, r1
 b3a:	70 f0       	brcs	.+28     	; 0xb58 <__mulsf3_pse+0x9c>
 b3c:	14 c0       	rjmp	.+40     	; 0xb66 <__fp_inf>
 b3e:	aa cf       	rjmp	.-172    	; 0xa94 <__fp_szero>
 b40:	5f 3f       	cpi	r21, 0xFF	; 255
 b42:	ec f3       	brlt	.-6      	; 0xb3e <__mulsf3_pse+0x82>
 b44:	98 3e       	cpi	r25, 0xE8	; 232
 b46:	dc f3       	brlt	.-10     	; 0xb3e <__mulsf3_pse+0x82>
 b48:	86 95       	lsr	r24
 b4a:	77 95       	ror	r23
 b4c:	67 95       	ror	r22
 b4e:	b7 95       	ror	r27
 b50:	f7 95       	ror	r31
 b52:	e7 95       	ror	r30
 b54:	9f 5f       	subi	r25, 0xFF	; 255
 b56:	c1 f7       	brne	.-16     	; 0xb48 <__mulsf3_pse+0x8c>
 b58:	fe 2b       	or	r31, r30
 b5a:	88 0f       	add	r24, r24
 b5c:	91 1d       	adc	r25, r1
 b5e:	96 95       	lsr	r25
 b60:	87 95       	ror	r24
 b62:	97 f9       	bld	r25, 7
 b64:	08 95       	ret

00000b66 <__fp_inf>:
 b66:	97 f9       	bld	r25, 7
 b68:	9f 67       	ori	r25, 0x7F	; 127
 b6a:	80 e8       	ldi	r24, 0x80	; 128
 b6c:	70 e0       	ldi	r23, 0x00	; 0
 b6e:	60 e0       	ldi	r22, 0x00	; 0
 b70:	08 95       	ret

00000b72 <__fp_nan>:
 b72:	9f ef       	ldi	r25, 0xFF	; 255
 b74:	80 ec       	ldi	r24, 0xC0	; 192
 b76:	08 95       	ret

00000b78 <__fp_pscA>:
 b78:	00 24       	eor	r0, r0
 b7a:	0a 94       	dec	r0
 b7c:	16 16       	cp	r1, r22
 b7e:	17 06       	cpc	r1, r23
 b80:	18 06       	cpc	r1, r24
 b82:	09 06       	cpc	r0, r25
 b84:	08 95       	ret

00000b86 <__fp_pscB>:
 b86:	00 24       	eor	r0, r0
 b88:	0a 94       	dec	r0
 b8a:	12 16       	cp	r1, r18
 b8c:	13 06       	cpc	r1, r19
 b8e:	14 06       	cpc	r1, r20
 b90:	05 06       	cpc	r0, r21
 b92:	08 95       	ret

00000b94 <__fp_round>:
 b94:	09 2e       	mov	r0, r25
 b96:	03 94       	inc	r0
 b98:	00 0c       	add	r0, r0
 b9a:	11 f4       	brne	.+4      	; 0xba0 <__fp_round+0xc>
 b9c:	88 23       	and	r24, r24
 b9e:	52 f0       	brmi	.+20     	; 0xbb4 <__fp_round+0x20>
 ba0:	bb 0f       	add	r27, r27
 ba2:	40 f4       	brcc	.+16     	; 0xbb4 <__fp_round+0x20>
 ba4:	bf 2b       	or	r27, r31
 ba6:	11 f4       	brne	.+4      	; 0xbac <__fp_round+0x18>
 ba8:	60 ff       	sbrs	r22, 0
 baa:	04 c0       	rjmp	.+8      	; 0xbb4 <__fp_round+0x20>
 bac:	6f 5f       	subi	r22, 0xFF	; 255
 bae:	7f 4f       	sbci	r23, 0xFF	; 255
 bb0:	8f 4f       	sbci	r24, 0xFF	; 255
 bb2:	9f 4f       	sbci	r25, 0xFF	; 255
 bb4:	08 95       	ret

00000bb6 <__udivmodhi4>:
 bb6:	aa 1b       	sub	r26, r26
 bb8:	bb 1b       	sub	r27, r27
 bba:	51 e1       	ldi	r21, 0x11	; 17
 bbc:	07 c0       	rjmp	.+14     	; 0xbcc <__udivmodhi4_ep>

00000bbe <__udivmodhi4_loop>:
 bbe:	aa 1f       	adc	r26, r26
 bc0:	bb 1f       	adc	r27, r27
 bc2:	a6 17       	cp	r26, r22
 bc4:	b7 07       	cpc	r27, r23
 bc6:	10 f0       	brcs	.+4      	; 0xbcc <__udivmodhi4_ep>
 bc8:	a6 1b       	sub	r26, r22
 bca:	b7 0b       	sbc	r27, r23

00000bcc <__udivmodhi4_ep>:
 bcc:	88 1f       	adc	r24, r24
 bce:	99 1f       	adc	r25, r25
 bd0:	5a 95       	dec	r21
 bd2:	a9 f7       	brne	.-22     	; 0xbbe <__udivmodhi4_loop>
 bd4:	80 95       	com	r24
 bd6:	90 95       	com	r25
 bd8:	bc 01       	movw	r22, r24
 bda:	cd 01       	movw	r24, r26
 bdc:	08 95       	ret

00000bde <_exit>:
 bde:	f8 94       	cli

00000be0 <__stop_program>:
 be0:	ff cf       	rjmp	.-2      	; 0xbe0 <__stop_program>
